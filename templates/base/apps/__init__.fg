import os

from flask import Flask
from flask_login import LoginManager
from flask_restful import Api, Resource, url_for
from flask_sqlalchemy import SQLAlchemy
from importlib import import_module

from apps.config import config_dict

db = SQLAlchemy()
login_manager = LoginManager()

@login_manager.user_loader
def load_user(user_id):
    from apps.authentication.models import User
    return User.query.get(user_id)

def register_blueprints(app: Flask, api: Api):
    from apps.api import initialize_routes as api_routes
    from apps.authentication import initialize_routes as authentication_routes
    api_routes(api)
    authentication_routes(api)

def configure_database(app: Flask):
    db.init_app(app)
    app.app_context().push()
    db.create_all()
    db.session.commit()

    @app.teardown_request
    def shutdown_session(exception=None):
        db.session.remove()

def register_users(app: Flask):
    login_manager.init_app(app)

def get_config():
    config_name = os.environ.get('FLASK_ENV', 'Local')
    try:
        app_config = config_dict[config_name.lower().title()]
    except:
        config_names = [x.FLASK_ENV for x in config_dict.values()]
        exit(f"Error: Invalid <config_mode>. Expected values [{','.join(config_names)}]")
    return app_config

def create_app():
    config = get_config()
    app = Flask(__name__)
    api = Api(app)
    app.config.from_object(config)
    print(config.SQLALCHEMY_DATABASE_URI)
    app.config["APPLICATION_ROOT"] = "/"
    app.config['TEMPLATES_AUTO_RELOAD'] = True

    register_users(app)
    register_blueprints(app, api)
    configure_database(app)
    return app